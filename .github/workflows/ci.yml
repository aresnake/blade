name: CI

on:
  push:
    branches: ["**"]
    paths-ignore:
      - "README.md"
      - "docs/**"
      - ".githooks/**"
  pull_request:
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  BLENDER_URL: https://download.blender.org/release/Blender4.5/blender-4.5.3-windows-x64.zip

jobs:
  test:
    name: Test & Lint (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install tooling
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Smoke-compile Python (fail on real errors)
        shell: bash
        run: |
          python - <<'PY'
          import os, sys, compileall, pathlib
          root = pathlib.Path.cwd()
          targets = [p for p in (root/'ares', root/'tools') if p.exists()]
          if not targets:
            print("::warning::No 'ares/' or 'tools/' directory to compile; skipping.")
            sys.exit(0)
          ok = True
          for t in targets:
            print(f"[compile] {t}")
            ok &= compileall.compile_dir(str(t), maxlevels=10, quiet=1)
          sys.exit(0 if ok else 1)
          PY

      - name: Ruff (now strict)
        # on passe ruff en strict ; si besoin on ajustera plus tard
        run: |
          if [ -d "ares" ]; then
            ruff check ares
          else
            echo "::warning::No 'ares/' directory; skipping ruff."
          fi

      - name: Pytest (strict)
        shell: bash
        run: |
          PYTHONPATH=. pytest -q

  package:
    name: Package & Release (ubuntu)
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install tooling
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Read add-on version
        id: meta
        run: |
          python - <<'PY'
          import os, re, pathlib
          init = pathlib.Path('ares/__init__.py')
          version = '0.0.0'
          if init.exists():
            m = re.search(r"__version__\s*=\s*['\"]([^'\"]+)['\"]", init.read_text('utf-8', errors='ignore'))
            if m: version = m.group(1)
          with open(os.environ['GITHUB_OUTPUT'], 'a', encoding='utf-8') as f:
            f.write(f"version={version}\n")
          PY

      - name: Build add-on ZIP
        run: |
          python - <<'PY'
          import re, zipfile, pathlib, sys
          root = pathlib.Path.cwd()
          pkg = root/'ares'
          if not pkg.exists():
            print("::error::Missing 'ares/' package; cannot build zip.")
            sys.exit(1)
          version = "0.0.0"
          init_path = pkg/'__init__.py'
          if init_path.exists():
            text = init_path.read_text('utf-8', errors='ignore')
            m = re.search(r"__version__\s*=\s*['\"]([^'\"]+)['\"]", text)
            if m:
              version = m.group(1)
          dist = root/'dist'
          dist.mkdir(exist_ok=True)
          zip_path = dist/f"blade_ares-{version}.zip"
          with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as z:
            for p in pkg.rglob('*'):
              if p.is_file():
                z.write(p, p.as_posix())
          print(f"::notice::Built {zip_path}")
          PY

      - name: Upload ZIP artifact
        uses: actions/upload-artifact@v4
        with:
          name: blade_ares-${{ steps.meta.outputs.version }}
          path: dist/*.zip
          if-no-files-found: error
          retention-days: 14

      - name: Release on tag
        if: github.ref_type == 'tag'
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ github.ref_name }}
          body: |
            Automated release from CI.
            - Tag: ${{ github.ref_name }}
            - Add-on version: ${{ steps.meta.outputs.version }}
          files: dist/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  smoke_blender:
    name: Smoke Blender headless (Windows)
    runs-on: windows-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Blender (portable)
        shell: pwsh
        continue-on-error: true
        run: |
          $ErrorActionPreference = 'Stop'
          $zip = "$env:RUNNER_TEMP\blender.zip"
          Invoke-WebRequest -Uri $env:BLENDER_URL -OutFile $zip
          Expand-Archive -LiteralPath $zip -DestinationPath $env:RUNNER_TEMP -Force
          Get-ChildItem $env:RUNNER_TEMP -Name

      - name: Run smoke import
        shell: pwsh
        continue-on-error: true
        run: |
          $blenderDir = Get-ChildItem $env:RUNNER_TEMP -Directory | Where-Object { $_.Name -like 'blender-4.5.*-windows-x64' } | Select-Object -First 1
          if (-not $blenderDir) { Write-Host '::warning::Blender folder not found'; exit 0 }
          $exe = Join-Path $blenderDir.FullName 'blender.exe'
          if (-not (Test-Path $exe)) { Write-Host '::warning::blender.exe not found'; exit 0 }
          & $exe -b --python-expr "import sys; sys.path.append(r'${{ github.workspace }}'); import ares; print('[ARES]', getattr(ares,'__version__','n/a'))"
