name: CI

on:
  push:
    branches: ["**"]
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install tooling
        run: |
          python -m pip install --upgrade pip
          pip install ruff yamllint

      - name: Smoke-compile Python (fail on real errors)
        shell: python
        run: |
          import os, sys, compileall, pathlib
          root = pathlib.Path.cwd()
          targets = [p for p in (root/'ares', root/'tools') if p.exists()]
          if not targets:
            print("::warning::No 'ares/' or 'tools/' directory to compile; skipping.")
            sys.exit(0)
          ok = True
          for t in targets:
            print(f"[compile] {t}")
            ok &= compileall.compile_dir(str(t), maxlevels=10, quiet=1)
          sys.exit(0 if ok else 1)

      - name: Lint (warn-only)
        continue-on-error: true
        run: |
          if [ -d "ares" ]; then
            ruff check ares || true
          else
            echo "::warning::No 'ares/' directory; skipping ruff."
          fi
          yamllint -s . || true

      - name: Build add-on ZIP
        shell: python
        run: |
          import os, re, zipfile, pathlib
          root = pathlib.Path.cwd()
          pkg = root/'ares'
          if not pkg.exists():
            print("::error::Missing 'ares/' package; cannot build zip.")
            raise SystemExit(1)

          version = "0.0.0"
          init_path = pkg/'__init__.py'
          if init_path.exists():
            text = init_path.read_text('utf-8', errors='ignore')
            m = re.search(r"__version__\s*=\s*['\"]([^'\"]+)['\"]", text)
            if m:
              version = m.group(1)

          dist = root/'dist'
          dist.mkdir(exist_ok=True)
          zip_path = dist/f"blade_ares-{version}.zip"

          with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as z:
            for p in pkg.rglob('*'):
              z.write(p, p.as_posix())

          print(f"::notice::Built {zip_path}")

      - name: Upload ZIP artifact
        uses: actions/upload-artifact@v4
        with:
          name: blade_ares-zip
          path: dist/*.zip
          if-no-files-found: error

      - name: Release on tag
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
